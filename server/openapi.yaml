openapi: 3.0.3
info:
  title: Simple Generic ECommerce API
  version: '1.0'
  description: >-
    This is a simple  generic Ecommerce API that is designed to be applicable to
    a number of different potential storefronts. 
tags:
  - name: products
    description: Access products and information about them.
  - name: carts
    description: Access information about user carts. Each user has one cart.
  - name: orders
    description: Access to store orders
  - name: categories
    description: Access to category information.
  - name: users
    description: Operations about user
  - name: admin
    description: Operations that require a user with admin privileges to be logged in.
paths:
  /products:
    summary: Get information about all products.
    get:
      summary: Get all products
      description: Retrieves product information from the DB in JSON format
      operationId: get_products
      responses:
        '200':
          description: Sucessful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      [
                        {
                          "name": "Pet Rock",
                          "price": 14.99,
                          "description": "Your new best friend",
                          "category": "pets",
                          "quantity_available": 14,
                          "image": "./images/petRock.png"
                        },
                        {
                          "name": "Pet Rock food",
                          "price": 2.99,
                          "description": "Food for your new best friend",
                          "category": "pet supplies",
                          "quantity_available": 500,
                          "image": "./images/petRockFood.png"
                        }
                      ]
        default:
          description: Default error sample response
      parameters:
        - name: searchTerm
          in: query
          description: An optional search term for products.
          required: false
          schema:
            type: string
      tags:
        - products
    post:
      summary: Add a new product to the product list.
      description: Inserts a new entry to the Products table in the DB.
      operationId: post_products
      requestBody:
        description: A new product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "name": "Pet Rock",
                        "price": 14.99,
                        "description": "Your new best friend",
                        "category": "pets",
                        "quantity_available": 14,
                        "image": "./images/petRock.png"
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: {}
        default:
          description: Default error sample response
      tags:
        - products
        - admin
  /products/{id}:
    summary: Interact with a specific product by ID.
    get:
      summary: Get information about a single product.
      description: Retrieves a single row from the products table based on product ID.
      operationId: get_product
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "name": "Pet Rock",
                        "price": 14.99,
                        "description": "Your new best friend",
                        "category": "pets",
                        "quantity_available": 14,
                        "image": "./images/petRock.png"
                      }
        '404':
          description: Product with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - products
    put:
      summary: Update information for a single product.
      description: Modifies a single row in the product table of the DB.
      operationId: put_product
      requestBody:
        description: An updated product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "name": "Pet Rock",
                        "price": 14.99,
                        "description": "Your new best friend",
                        "category": "pets",
                        "quantity_available": 14,
                        "image": "./images/petRock.png"
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        '404':
          description: Product with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - products
        - admin
    delete:
      summary: Delete a product.
      description: Removes a product row from the products table of the DB.
      operationId: delete_product
      responses:
        '204':
          description: Entry successfully deleted.
          content:
            application/json:
              examples:
                Entry successfully deleted:
                  value: '{}'
        '404':
          description: Product with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - products
        - admin
    parameters:
      - name: id
        in: path
        description: The id of the product.
        required: true
        schema:
          type: string
  /carts:
    summary: Used to interact with user carts.
    get:
      summary: Get information on all carts.
      description: Get all cart rows in the DB.
      operationId: get_carts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                              "id": 11,
                              "user_id": 5,
                              "items": "2"
                      },
                      {
                              "id": 12,
                              "user_id": 1,
                              "items": "2, 1, 4"
                      }
        default:
          description: Default error sample response.
      tags:
        - carts
        - admin
  /carts/{userId}:
    summary: Used to interact with an individual users cart.
    get:
      summary: Get information on an individual user's cart.
      description: Get one cart row in the DB.
      operationId: get_user_carts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                              "id": 11,
                              "user_id": 5,
                              "items": "2"
                      }
        '404':
          description: Cart with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response.
      tags:
        - carts
    post:
      summary: Add an item to a user's cart.
      description: Updates the carts item information.
      operationId: add_to_cart
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                              "id": 11,
                              "user_id": 5,
                              "items": "2, 1"
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        '404':
          description: Cart with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - carts
    delete:
      summary: Delete a user's cart.
      description: Delete a row from the carts table of the db.
      operationId: delete_cart
      responses:
        '204':
          description: Entry successfully deleted.
          content:
            application/json:
              examples:
                Entry successfully deleted:
                  value: '{}'
        '404':
          description: Product with corresponding ID not found.
          content:
            application/json:
              examples:
                Product with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - carts
    parameters:
      - name: userId
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
  /orders:
    summary: Used to interact with user orders.
    post:
      summary: Add a new order
      description: Add a new order to the orders table of the DB.
      operationId: post_orders
      requestBody:
        description: A new order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-
                      
                      {
                        "username": "bob14",
                        "items": [14, 25, 28, 104],
                        "delivery_address": "1 Main Street"
                        "price": 99.99
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - orders
  /orders/{id}:
    summary: Used to interact with individual orders.
    get:
      summary: Get details about a single order.
      description: Retrieves a single row from the orders table of the DB.
      operationId: get_order
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                          "username": "bob14",
                          "items": [14, 25, 18, 101],
                          "delivery_address": "1 Main Street",
                          "price": 99.99,
                      }
        '404':
          description: Order with corresponding ID not found.
          content:
            application/json:
              examples:
                Order with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - orders
    put:
      summary: Update details of a single order.
      description: Updates a row in the orders table of the DB.
      operationId: put_order
      requestBody:
        description: An updated order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Entry successfully updated
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                          "username": "bob14",
                          "items": [14, 25, 18, 101],
                          "delivery_address": "1 Main Street",
                          "price": 99.99,
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        '404':
          description: Order with corresponding ID not found.
          content:
            application/json:
              examples:
                Order with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - orders
    delete:
      summary: Delete a single order.
      description: Deletes a single row from  the orders table of the DB.
      operationId: delete_order
      responses:
        '204':
          description: Entry successfully deleted.
          content:
            application/json:
              examples:
                Entry successfully deleted:
                  value: '{}'
        '404':
          description: Order with corresponding ID not found.
          content:
            application/json:
              examples:
                Order with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - orders
    parameters:
      - name: id
        in: path
        description: The id of the order.
        required: true
        schema:
          type: string
  /categories:
    summary: Get information about categories.
    get:
      summary: Gets information about all categories.
      description: Gets a list of all rows in the categories table of the DB.
      operationId: get_categories.
      responses:
        '200':
          description: Sucessful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                      "categories": [
                        {
                          "id": 1,
                          "name": "Pets"
                        },
                        {
                          "id": 2,
                          "name": "Pet supplies"
                        }
                      ]
                    }
        default:
          description: Default error sample response
      tags:
        - categories
    post:
      summary: Add a new category
      description: Adds a new row to the categories table of the DB.
      operationId: post_categories
      requestBody:
        description: A new category object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 3,
                        "name": "special offers."
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - categories
        - admin
  /categories/{id}:
    summary: Interact with individual categories
    get:
      summary: Get information about a single category.
      description: Gets a single row from the categories table of the DB.
      operationId: get_category
      responses:
        '200':
          description: Entry successfully retrieved
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 3,
                        "name": "special offers."
                      }
        '404':
          description: Category with corresponding ID not found.
          content:
            application/json:
              examples:
                Category with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - categories
    put:
      summary: Update information about a category.
      description: Updates a single row in the categories table of the DB.
      operationId: put_category
      requestBody:
        description: An updated category object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Entry successfully updated
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 3,
                        "name": "even specialer offers."
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        '404':
          description: Category with corresponding ID not found.
          content:
            application/json:
              examples:
                Category with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - categories
        - admin
    delete:
      summary: Delete a category
      description: Deletes a single row from the categories table of the DB.
      operationId: delete_category
      responses:
        '204':
          description: Entry successfully deleted.
          content:
            application/json:
              examples:
                Entry successfully deleted:
                  value: '{}'
        '404':
          description: Category with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - categories
        - admin
    parameters:
      - name: id
        in: path
        description: The id of the category.
        required: true
        schema:
          type: string
  /users:
    summary: Get information about users.
    post:
      summary: Register a new user.
      description: Adds a new row to the users table of the DB.
      operationId: post_users
      requestBody:
        description: A new user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              examples:
                User successfully registered:
                  value: |-

                    {
                      "id": 4,
                      "username": "sally7",
                      "address": "18B Wide Avenue",
                      "admin": false
                    }
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad request:
                  value: {}
        default:
          description: Default error sample response
      tags:
        - users
    get:
      summary: Get all users
      description: Gets all user rows from the db
      operationId: get_all_users
      responses:
        '200':
          description: Users successfully retrieved
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 4,
                        "username": "sally7",
                        "address": "18B Wide Avenue",
                        "admin": false
                      },
                      {
                        "id": 7,
                        "username": "bob7",
                        "address": "24A Narrow Street",
                        "admin": true
                      }
        default:
          description: Default error sample response
      tags:
        - users
        - admin
  /users/{id}:
    summary: Get information about individual users.
    get:
      summary: get information about a single user.
      description: Retrieves a single row from the users table of the DB.
      operationId: get_user
      responses:
        '200':
          description: User successfully retrieved
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 4,
                        "username": "sally7",
                        "address": "18B Wide Avenue"
                        "admin": false
                      }
        '404':
          description: User with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
    put:
      summary: Update details of an individual user.
      description: Updates  a single row in the users table of the DB.
      operationId: put_user
      requestBody:
        description: An updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Entry successfully updated
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 4,
                        "username": "sally7",
                        "address": "4 New Street"
                        "admin": false
                      }
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value: '{}'
        '404':
          description: User with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
    delete:
      summary: Delete a user.
      description: Deletes a row from the users table of the DB.
      operationId: delete_user
      responses:
        '204':
          description: Entry successfully deleted.
          content:
            application/json:
              examples:
                Entry successfully deleted:
                  value: '{}'
        '404':
          description: Category with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
  /users/login:
    summary: Used to login a user.
    get:
      summary: Logs a user in.
      description: Authenticates a user and retrieves a session token.
      operationId: login
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              examples:
                Successful login:
                  value: |-

                    {
                      "username": "bob14",
                      "token": "ghbfnsy657"
                    }
        '401':
          description: Authentication failed
          content:
            application/json:
              examples:
                Authentication failed:
                  value: {}
        default:
          description: Default error sample response
      tags:
        - users
  /users/logout:
    summary: Logs a user out.
    get:
      summary: Logs the logged in user out.
      description: Performs logout function.
      operationId: logout
      responses:
        '200':
          description: sucessful logout
          content:
            application/json:
              examples:
                Successful logout:
                  value: {}
        default:
          description: Default error sample response
      tags:
        - users
  /users/{id}/orders:
    summary: For getting a particular users orders.
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
    get:
      summary: Get all a particular user's orders
      description: >-
        Retrieves all orders with a particular user id from the orders table of
        the DB
      operationId: get_user_orders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              examples:
                Successful operation:
                  value: |-
                    {
                      "orders": [
                        {
                          "username": "bob14",
                          "items": [14, 25, 18, 101],
                          "delivery_address": "1 Main Street",
                          "price": 99.99
                        },
                        {
                          "username": "bob14",
                          "items": [1, 78],
                          "delivery_address": "1 Main Street",
                          "price": 7.99
                        }
                      ]
                    }
        '404':
          description: user not found
          content:
            application/json:
              examples:
                User not found:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
        - orders
  /checkout:
    summary: Checkouts a logged in user's cart.
    description: creates an order item in the DB from a cart.
    post:
      summary: Checks a user's cart out.
      description: >-
        Adds a row to the orders DB matching the cart, deletes the row in the
        carts db
      operationId: checkout
      responses:
        '200':
          description: Entry successfully added
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                          "username": "bob14",
                          "items": [14, 25, 18, 101],
                          "delivery_address": "1 Main Street",
                          "price": 99.99,
                      }
        '404':
          description: Cart with corresponding ID not found.
          content:
            application/json:
              examples:
                Order with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - carts
        - orders
  /users/{id}/makeAdmin:
    summary: Used to give admin access to a user.
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
    post:
      summary: Gives the specified user admin rights.
      description: Modifies the user in the DB to make admin = true
      operationId: make_admin
      responses:
        '200':
          description: Entry successfully updated
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 4,
                        "username": "sally7",
                        "password": "supersecretpasswordhash",
                        "address": "4 New Street"
                        "admin": true
                      }
        '404':
          description: User with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
        - admin
  /users/{id}/revokeAdmin:
    summary: Used to revoke a user's admin access.
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
    post:
      summary: Revokes the specified user's admin rights.
      description: ''
      operationId: revoke_admin
      responses:
        '200':
          description: Entry successfully updated
          content:
            application/json:
              examples:
                Successful operation:
                  value: |2-

                      {
                        "id": 4,
                        "username": "sally7",
                        "password": "supersecretpasswordhash",
                        "address": "4 New Street"
                        "admin": true
                      }
        '404':
          description: User with corresponding ID not found.
          content:
            application/json:
              examples:
                User with corresponding ID not found.:
                  value: '{}'
        default:
          description: Default error sample response
      tags:
        - users
        - admin
components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
        category:
          type: string
        quantity_available:
          type: integer
        image:
          type: string
    Order:
      type: object
      properties:
        username:
          type: string
        items:
          type: array
          items:
            type: integer
        delivery_address:
          type: string
        price:
          type: number
    Category:
      type: object
      properties:
        name:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        address:
          type: string
